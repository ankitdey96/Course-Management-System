@model AccountVM

<div class="w-100 card border-0 p-4">
    <div class="card-header bg-success bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">Users List</h2>
            </div>
        </div>
    </div>
    <div class="modal fade" id="exampleModalCenter" tabindex="-1" role="dialog" aria-labelledby="exampleModalCenterTitle" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLongTitle">Edit Role</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close" id="closeIcon">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">

                        <div class="form-floating mb-3">
                            <input class="form-control" asp-for="UserName" autocomplete="username" aria-required="true" placeholder="User Name" id="txtUserName" disabled/>
                            <label>User Name</label>
                        </div>

                        <div class="form-floating mb-3">
                            <select id="cboRolesList" asp-items="@Model.RolesList"
                                    class="form-select border shadow">
                                <option selected>--Select Role--</option>
                            </select>
                        <label>Role</label>

                        </div>
                  
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal" id="modalClose">Close</button>
                    <button type="button" class="btn btn-primary" id="SaveRole">Save changes</button>
                </div>
            </div>
        </div>
    </div>
    <div class="card-body border p-4">
        <div id="UserGrid" class=" ag-theme-balham" style="height: 500px"></div>
    </div>
</div>

<script>
    $(document).ready(function () {
        debugger;
        DefineGrid();
        GetUsers();

    });
    let gridApi;

    function DefineGrid() {
        console.log("In Grid");
        const gridOptions = {
            columnDefs: [
                { valueGetter: x => { return (x.node.rowIndex + 1) }, headerName: "SL", width: 55 },
                { field: "FirstName", headerName: "First Name", minWidth: 170 },
                { field: "LastName", headerName: "Last Name", minWidth: 170 },
                { field: "Email", headerName: "Email", minWidth: 170 },
                { field: "Role", headerName: "Role", minWidth: 170 },
                { field: "actions", headerName: "Actions", cellRenderer: CustomButtonComponent }
            ],
            defaultColDef: {
                filter: "agTextColumnFilter",
            },
            rowSelection: "multiple",
            //rowModelType: "infinite",
            suppressRowClickSelection: true,
            pagination: true,
            paginationPageSize: 20,
            paginationPageSizeSelector: [20, 50, 10],
        };
        const gridDiv = document.querySelector("#UserGrid");
        gridApi = agGrid.createGrid(gridDiv, gridOptions);
    }

    function CustomButtonComponent(params) {
        const eDiv = document.createElement('div');
        let eEDitButton = document.createElement('button');
        let eEditIcon = document.createElement('i');
        eEditIcon.className = 'fas fa-pencil-alt';

        eEDitButton.className = 'btn btn-info btn-sm';
        eEDitButton.appendChild(eEditIcon);
        let editText = document.createTextNode(' Edit');
        eEDitButton.onclick = function () {
            EditRole(params.data);
        }
        // Append the text node to the button
        eEDitButton.appendChild(editText);

        eDiv.appendChild(eEDitButton);

        let eDeleteButton = document.createElement('button');
        let eDeleteIcon = document.createElement('i');
        eDeleteIcon.className = 'fas fa-trash';

        eDeleteButton.className = 'btn btn-danger btn-sm show-bs-modal';
        eDeleteButton.appendChild(eDeleteIcon);
        let deleteText = document.createTextNode(' Delete');
        eDeleteButton.onclick = function () {
           // DeleteCourse(params.data);
        }
        // Append the text node to the button
        eDeleteButton.appendChild(deleteText);

        eDiv.appendChild(eDeleteButton);


        return eDiv;
    }

    function GetUsers() {
        $.ajax({
            type: "POST",
            url: "@Url.Action("GetAllUsers", "Account")",
            success: function (data) {
                gridApi.setGridOption("rowData", data);

            },
            failure: function (response) {

                // $('.spinner').hide();
                alert(response.responseText);
            },
            error: function (response) {
                // $('.spinner').hide();
                 alert(response.responseText);
            }
        });
    }
    function EditRole(oUser){
        $("#txtUserName").val(oUser.UserName);
        $("#cboRolesList").val(oUser.RoleId);

        $('#exampleModalCenter').modal('show');

    }

    $("#modalClose,#closeIcon").click(function () {
        $('#exampleModalCenter').modal('hide');

    });

    $("#SaveRole").click(function () {
        var oRole = {
            Role: $("#cboRolesList option:selected").text(),
            RoleID: $("#cboRolesList").val(),
            UserName: $("#txtUserName").val()
        };
        $.ajax({
            type: "POST",
            data: oRole,
            url: "@Url.Action("EditRole", "Account")",
            success: function (data) {
                gridApi.setGridOption("rowData", data);

            },
            failure: function (response) {

                // $('.spinner').hide();
                alert(response.responseText);
            },
            error: function (response) {
                console.log(response);
                // $('.spinner').hide();
                alert(response.responseText);
            }
        });

    });
    
</script>

