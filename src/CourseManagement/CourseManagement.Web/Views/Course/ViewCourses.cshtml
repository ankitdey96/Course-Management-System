<div class="w-100 card border-0 p-4">
    <div class="card-header bg-success bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">Course List</h2>
            </div>
        </div>
    </div>
    <div class="card-body border p-4">
        <div class="row pb-3">
            <div class="col-6 offset-6 text-end">
                <a asp-controller="Course" asp-action="Create" class="btn btn-secondary">
                    <i class="bi bi-plus-circle"></i> Create Course
                </a>
            </div>

        </div>
        <div id="CoursesGrid" class="ag-theme-quartz-dark" style="height: 500px"></div>

    </div>
</div>
@* 
@section Scripts
{ *@
<script type="text/javascript">
        $(document).ready(function () {
            debugger;
            DefineGrid();
            GetCourses();

        });
    let gridApi;

        function DefineGrid() {
            console.log("In Grid");
                const gridOptions = {
                    columnDefs :[
                        { valueGetter: x => { return (x.node.rowIndex + 1) }, headerName: "SL", width: 55 },
                        { field: "Name", headerName: "Course Name", minWidth: 170 },
                        { field: "Description", headerName: "Course Description", minWidth: 170 },
                        { field: "NoOfClasses", headerName: "No Of Classes", minWidth: 170 },
                        { field: "Fees", headerName: "Fees", minWidth: 170 },
                        { field: "actions",headerName: "Actions",cellRenderer: CustomButtonComponent }
                    ],
                    defaultColDef: {
                        filter: "agTextColumnFilter",
                    },
                    rowSelection: "multiple",
                    //rowModelType: "infinite",
                    suppressRowClickSelection: true,
                    pagination: true,
                    paginationPageSize: 20,
                    paginationPageSizeSelector: [20,50,10],
                    onPaginationChanged: PaginationChanged,
                };
                const gridDiv = document.querySelector("#CoursesGrid");
                gridApi = agGrid.createGrid(gridDiv, gridOptions);
        }

        function CustomButtonComponent(params) {
            const eDiv = document.createElement('div');
            let eEDitButton = document.createElement('button');
            let eEditIcon = document.createElement('i');
            eEditIcon.className = 'fas fa-pencil-alt';

            eEDitButton.className = 'btn btn-info btn-sm';
            eEDitButton.appendChild(eEditIcon);
            let editText = document.createTextNode(' Edit');
            eEDitButton.onclick = function(){
                EditCourse(params.data);
            }
            // Append the text node to the button
            eEDitButton.appendChild(editText);

            eDiv.appendChild(eEDitButton);

            let eDeleteButton = document.createElement('button');
            let eDeleteIcon = document.createElement('i');
            eDeleteIcon.className = 'fas fa-trash';

            eDeleteButton.className = 'btn btn-danger btn-sm show-bs-modal';
            eDeleteButton.appendChild(eDeleteIcon);
            let deleteText = document.createTextNode(' Delete');
            eDeleteButton.onclick = function () {
                DeleteCourse(params.data);
            }
            // Append the text node to the button
            eDeleteButton.appendChild(deleteText);

            eDiv.appendChild(eDeleteButton);

            // eDiv.innerHTML = '<button type="submit" class="btn btn-info btn-sm">onclick="EditCourse()" <i class="fas fa-pencil-alt" > </i> Edit </button > <button type="submit" class="btn btn-danger btn-sm show-bs-modal" > <i class="fas fa-trash" > </i>Delete  </button > ';

            
            return eDiv;
        }

        function EditCourse(oCourse) {
            debugger
            window.location.href = '/Course/Update/'+oCourse.Id;
        }

        function DeleteCourse(oCourse){

            $.ajax({
            type: "POST",
            dataType: "json",
            url: "/Course/Delete/"+oCourse.Id,
            success: function (data) {
                debugger
                oMessage = data;
                console.log(oMessage);
                if (oMessage == "Data Deleted Successfully") {
                    gridApi.applyTransaction({ remove: [oCourse]});

                }
            },
            error: function (xhr, status, error) {
                alert(error);
            }

        });

        }

        function PaginationChanged(params) {
            // alert("in change");
            console.log(params,"params");
            if (params.newPage) {
                console.log('Page changed to: ' + (params.api.paginationGetCurrentPage() + 1));
                GetCourses();
            }
        }

        function GetCourses(){
            console.log(gridApi);
            var oCourseVM = {
                PageNo:gridApi.paginationGetCurrentPage()+1,
                PageSize: gridApi.paginationGetPageSize()
            };

            $.ajax({
                url: "/Course/GetCourses",
                type: "POST",
                contentType: "application/json", //must be added
                dataType: "json", //better to add, not mandatory
                // // beforeSend: function (xhr) {
                // //     xhr.setRequestHeader("Authorization",
                // //         "Bearer " + '/* HttpContextAccessor.HttpContext.Session.GetString("token") */');
                // // },
                data: JSON.stringify(oCourseVM),
                success: function (data) {
                    debugger;
                    var oCourses = data;
                    const dataSource = {
                    rowCount: undefined, // behave as infinite scroll
                        getRows: (params) => {
                        const rowsThisPage = oCourses.slice(0, 6);
                            console.log(params, "params ajax");
                            params.successCallback(rowsThisPage, 11);
                    },
                    };
                    // // gridApi.paginationGoToPage(2);
                    //gridApi.setGridOption("datasource", dataSource);
                     gridApi.setGridOption("rowData", oCourses);


                },
                error: function (xhr, status, error) {
                    alert(error);
                }

            });
        }
    </script>

    
@* } *@